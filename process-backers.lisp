(ql:quickload '(cl-csv))

(defun question-type (text)
  (flet ((have (sub)
           (search sub text :test #'char-equal)))
    (cond ((have "credits")
           (cond ((have "message") :message)
                 ((have "name") :name)))
          ((have "discord") :discord)
          ((have "dweller") :dweller))))

(defun process (file)
  (destructuring-bind (fields . rows)
      (with-open-file (stream file)
        (cl-csv:read-csv stream))
    (let ((backers (make-hash-table :test 'eql)))
      (dolist (row rows)
        (flet ((field (name)
                 (nth (position name fields :test #'equalp) row))
               (trim (value)
                 (string-trim '(#\Space #\Linefeed #\Tab) (remove #\Return value))))
          (let ((id (parse-integer (field "backer_id")))
                (type (question-type (field "question_text"))))
            (if type
                (setf (getf (gethash id backers) type)
                      (trim (field "answer_text")))
                (warn "Unknown question type: ~a" (field "question_text"))))))
      (alexandria:hash-table-values backers))))

(defun compile-credits (file)
  (let ((data (sort (process file) #'string< :key (lambda (a) (string-downcase (getf a :name))))))
    (dolist (user data)
      (when (or (getf user :name) (getf user :message))
        (format T "**~a**~@[~%  ~a~]~%" (or (getf user :name) "Anonymous") (getf user :message))))))

(defun compile-dwellers (file)
  (sort (loop for user in (process file)
              for dweller = (getf user :dweller)
              when dweller collect dweller)
        #'string<))

(defun compile-discord-tags (file)
  (loop for user in (process file)
        for discord = (getf user :discord)
        when discord collect discord))
